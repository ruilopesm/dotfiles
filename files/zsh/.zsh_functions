## Misc ##

# Downloads a file from blackboard using wget (argument: link to the file)
function bb_down() {
    wget --user=PG56009 --ask-password $1
}

# Shows weather of specified location (argument: location)
function weather() {
    curl wttr.in/$1
}

# Shows a list with the most used commands (argument: number of most used commands)
function topcmd() {
    history | awk '{print $2}' | sort | uniq -c | sort -nr | column -t | nl | head -n$1
}

# Creates a folder and changes the directory into it (argument: folder name)
function mkcd() {
    mkdir -p $1
    cd $1
}

# Changes wallpaper using feh (argument: wallpaper filename)
function cw() {
    feh --bg-scale ~/Pictures/wallpapers/$1
}

# Opens given file using xdg-open (argument: filename)
function open() {
    xdg-open $@ &
    disown
}

# Clones a repository and changes the directory into it (argument: repository link)
function clonecd() {
    git clone --recurse-submodules $@
    cd "$(basename "$_" .git)"
}

# Changes the current branch into a given PR branch (argument: PR number)
function pr() {
    gh pr checkout $1
}

# Copies the given file contents to the clipboard (argument: filename)
function copy() {
    xclip -sel clip $1
}

# Commits with a specific backup message (used in obsidian vault)
function gcdatetime() {
    local timestamp=$(TZ='Europe/Lisbon' date '+%d-%m-%Y %H:%M:%S')
    git commit -m "backup: $timestamp @ $(hostname)"
}

# Rescues a given file from the Downloads folder (procedure only)
function rescue() {
    local src
    if [ $# -gt 0 ]; then
        src=~/Downloads/"$1"
    else
        file=$(eza --sort oldest ~/Downloads | fzf --multi --ansi | tr -d "'")
        [ -z "$file" ] && return 1
        src=~/Downloads/"$file"
    fi

    mv "$src" .
}

# Searches for a given content in the current directory and opens VSCode on selected
# line
function lupa() {
    rg --column --line-number --no-heading --color=always --smart-case --ignore-file .gitignore . | fzf --ansi \
       --bind 'enter:become(code --goto {1}:{2})' \
       --delimiter : \
       --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
       --preview-window '~4,+{2}+4/3,<80(up)'
}

# Function with several actions for working with clipcat
function clipboard() {
    local action=$1
    if [[ $action == "pick" ]]; then
        clipcat-menu --finder=builtin insert
    elif [[ $action == "delete" ]]; then
        clipcat-menu --finder=builtin remove
    elif [[ $action == "clear" ]]; then
        clipcatctl clear
    else
        echo "Usage: clipboard pick|delete|clear" >&2
        return 1
    fi
}

## Lab ##

function lab() {
    local target=$1 action=$2 conn
    if [[ $target == "vpn" ]]; then
        conn="HASLab VPN"
    elif [[ $target == "network" ]]; then
        conn="HASLab Net"
    else
        echo "Usage: lab vpn|network up|down" >&2
        return 1
    fi

    if [[ $action == "up" ]]; then
        nmcli connection up "$conn"
    elif [[ $action == "down" ]]; then
        nmcli connection down "$conn"
    else
        echo "Usage: lab vpn|network up|down" >&2
        return 1
    fi
}

function remote() {
    local folder=${1:-thesis}
    code --folder-uri "vscode-remote://ssh-remote+lab/home/gsd/$folder"
}

function to() {
  local host dir choice
  if [ -z "$1" ]; then
    echo "Usage: to user@host" >&2
    return 1
  fi

  host=$1
  dir="."

  while true; do
    choice=$(find "$dir" -maxdepth 1 ! -path "$dir" -printf "%P\n" \
             | fzf --prompt="Local [$dir] ▶ " \
             ) || return 1

    if [ -d "$dir/$choice" ]; then
      dir="$dir/$choice"
    else
      break
    fi
  done

  scp "$dir/$choice" "$host:."
}

from() {
  local host="" dir choice start_in_root=0 folder=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --root) start_in_root=1; shift ;;
      --folder) folder="$2"; shift 2 ;;
      -h | --help)
        echo "Usage: from [--root] [--folder PATH] user@host"
        echo "  --root          Start browsing from / instead of ~"
        echo "  --folder PATH   Download PATH directly (skip fzf)"
        return 0
        ;;

      *) host="$1"; shift ;;
    esac
  done

  if [[ -z "$host" ]]; then
    echo "Usage: from [--root] [--folder PATH] user@host"
    return 1
  fi

  _q() { printf "%q" "$1"; }
  _q_or_raw_tilde() {
    if [[ "$1" == ~* ]]; then printf "%s" "$1"; else _q "$1"; fi
  }

  _remote_is_dir() {
    local p="$1"
    ssh "$host" "d=$(_q_or_raw_tilde "$p"); [ -d \"\$d\" ]"
  }

  _remote_list() {
    local p="$1"
    ssh "$host" "d=$(_q_or_raw_tilde "$p"); find \"\$d\" -maxdepth 1 ! -path \"\$d\" -printf '%P\n'"
  }

  if [[ -n "$folder" ]]; then
    if _remote_is_dir "$folder"; then
      scp -r "$host:$(_q_or_raw_tilde "$folder")" .
    else
      scp    "$host:$(_q_or_raw_tilde "$folder")" .
    fi
    return $?
  fi

  if [[ $start_in_root -eq 1 ]]; then
    dir="/"
  else
    dir="~"
  fi

  while true; do
    choice=$(
      _remote_list "$dir" | fzf --prompt="Remote [$host:$dir] ▶ "
    ) || return 1

    if _remote_is_dir "$dir/$choice"; then
      dir="$dir/$choice"
    else
      break
    fi
  done

  if _remote_is_dir "$dir/$choice"; then
    scp -r "$host:$(_q_or_raw_tilde "$dir/$choice")" .
  else
    scp    "$host:$(_q_or_raw_tilde "$dir/$choice")" .
  fi
}
